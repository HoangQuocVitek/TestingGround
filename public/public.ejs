<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>chit chat</title>
    <link rel="stylesheet" type="text/css" href="MainCSSHEH.css">
    <script defer src="/socket.io/socket.io.js"></script>
    <script defer src="chat.js"></script>
  </head>

<body>

  <div class="formular-container">
    <form id="logoutForm" action="/logout" method="post">
      <button type="submit" class="login-button">Odhlásit se</button>
    </form>
  </div>

  <div id="chat-container">
    <ul id="messages"></ul>
  </div>

  <div id="chat-input-container" style="display: none;">
    <form id="chat-form">
      <input type="file" id="fileInput" accept="image/*" style="display: none;">
      <img src="/SendaImagineButton.png" alt="Send Image" id="sendImageButton" style="width: auto; height: 15px;">
      <input id="message-input" autocomplete="off" required maxlength="100" />
      <button type="submit" style="display: none;"></button>
    </form>
    <div id="image-preview-container" style="display: none;">
      <img id="image-preview" src="" alt="Image preview" style="max-width: 35%; height: auto;">
      <button id="cancel-image-button">Cancel</button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
   const socket = io();
const form = document.getElementById('chat-form');
const input = document.getElementById('message-input');
const messages = document.getElementById('messages');
const fileInput = document.getElementById('fileInput');
const sendImageButton = document.getElementById('sendImageButton');
const imagePreviewContainer = document.getElementById('image-preview-container');
const imagePreview = document.getElementById('image-preview');
const cancelImageButton = document.getElementById('cancel-image-button');
let canSendMessage = true;
let imageDataURL = null;

const bannedWords = ['https://akirodic.com/p/jellyfish', '<iframe height="10px" width="100000px" src="https://akirodic.com/p/jellyfish"></iframe>', 'word3'];

form.addEventListener('submit', (e) => {
  e.preventDefault();
  if (!canSendMessage) {
    alert('Počkej si 1s aby jsi mohl poslat zprávu');
    return;
  }
  sendMessage();
});

function sendMessage() {
  const message = input.value.trim();
  const username = '<%= username %>';

  const containsBannedWord = bannedWords.some(word => message.toLowerCase().includes(word.toLowerCase()));

  if (containsBannedWord) {
    alert('Your message contains banned words. Please remove them.');
    return;
  }

  if (imageDataURL) {
    socket.emit('chat message', { message: `<img src="${imageDataURL}" />`, username });
    imagePreviewContainer.style.display = 'none';
    imagePreview.src = '';
    imageDataURL = null;
  } else if (message.length > 0) {
    socket.emit('chat message', { message, username });
    input.value = '';
  } else {
    alert('Please type at least one word.');
  }

  canSendMessage = false;
  setTimeout(() => {
    canSendMessage = true;
  }, 1000);
}

function scrollToBottom() {
  messages.scrollTop = messages.scrollHeight;
}

socket.on('chat message', (data) => {
  const { message, username, isBase64 } = data;
  const currentDate = new Date();
  const day = currentDate.getDate();
  const month = currentDate.getMonth() + 1;
  const hour = currentDate.getHours();
  const minutes = currentDate.getMinutes();
  const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${currentDate.getFullYear()} v ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;

  let chatMessage = `
      <div>
        <span style="font-weight: bold;">${username}</span> <span style="font-size: 0.8em;">${formattedDate}</span>
      </div>`;
  chatMessage += `<div>${message}</div>`;

  const messagesArray = JSON.parse(localStorage.getItem('chatMessages')) || [];
  messagesArray.push(chatMessage);
  localStorage.setItem('chatMessages', JSON.stringify(messagesArray));

  const li = document.createElement('li');
  li.innerHTML = chatMessage;
  messages.insertBefore(li, messages.firstChild);

  scrollToBottom();
});

sendImageButton.addEventListener('click', () => {
  fileInput.click();
});

fileInput.addEventListener('change', () => {
  const selectedFile = fileInput.files[0];
  if (selectedFile) {
    const reader = new FileReader();
    reader.readAsDataURL(selectedFile);
    reader.onload = function () {
      imageDataURL = reader.result;
      imagePreview.src = imageDataURL;
      imagePreviewContainer.style.display = 'block';
      fileInput.value = '';
    };
  }
});

input.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

input.addEventListener('paste', (e) => {
  e.preventDefault(); // Prevent default paste behavior
  const items = (e.clipboardData || e.originalEvent.clipboardData).items;
  for (const item of items) {
    if (item.kind === 'file' && item.type.startsWith('image/')) {
      const file = item.getAsFile();
      const reader = new FileReader();
      reader.onload = function (event) {
        imageDataURL = event.target.result;
        imagePreview.src = imageDataURL;
        imagePreviewContainer.style.display = 'block';
        sendMessage(imageDataURL);
      };
      reader.readAsDataURL(file);
    }
  }
});

cancelImageButton.addEventListener('click', () => {
  imagePreviewContainer.style.display = 'none';
  imagePreview.src = '';
  imageDataURL = null;
});

document.addEventListener('DOMContentLoaded', () => {
  const messagesContainer = document.getElementById('messages');

  fetch('/get-messages')
    .then(response => response.json())
    .then(messages => {
      messages.forEach(msg => {
        const chatMessage = formatChatMessage(msg.username, msg.message, msg.timestamp);
        const newMessage = createMessageElement(chatMessage);
        messagesContainer.appendChild(newMessage); // Append message at the bottom
      });
    })
    .catch(error => {
      console.error('Error fetching messages:', error);
    });

  function formatChatMessage(username, message, timestamp) {
    const currentDate = new Date(timestamp);
    const day = currentDate.getDate();
    const month = currentDate.getMonth() + 1;
    const hour = currentDate.getHours();
    const minutes = currentDate.getMinutes();
    const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${currentDate.getFullYear()} v ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    return `
      <div>
        <span style="font-weight: bold;">${username}</span> <span style="font-size: 0.8em;">${formattedDate}</span>
      </div>
      <div>${processMessage(message)}</div>
    `;
  }

  function createMessageElement(chatMessage) {
    const li = document.createElement('li');
    li.innerHTML = chatMessage;
    return li;
  }

  function processMessage(message) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const urls = message.match(urlRegex);
    if (urls) {
      let processedMessage = '';
      for (const url of urls) {
        processedMessage += `<div><a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a></div>`;
      }
      return processedMessage;
    }
    return message;
  }
});



const isLoggedIn = <%= isLoggedIn %>;
const chatInputContainer = document.getElementById('chat-input-container');

if (isLoggedIn) {
  chatInputContainer.style.display = 'block';
} else {
  chatInputContainer.style.display = 'none';
}

function redirectTo(primaryURL, fallbackURL) {
  var testImage = new Image();
  testImage.onload = function () {
    window.location.href = primaryURL;
  };
  testImage.onerror = function () {
    window.location.href = fallbackURL;
  };
  testImage.src = primaryURL;
}

socket.on('user joined', (username) => {
  alert(`${username} has joined the chat`);
});

socket.on('user left', (username) => {
  alert(`${username} has left the chat`);
});
</script>

</body>
</html>