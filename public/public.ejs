<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>chit chat

  </title>
  <style>
body {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100vh;
  margin: 0;
  font-family: Arial, sans-serif;
  background-color: #363636;
}

#chat-container {
  display: flex;
  flex-direction: column-reverse; /* Reverse the order of messages */
  height: 70%;
  max-height: 70%; /* Set maximum height */
  width: 80%;
  border: 1px solid #ccc;
  overflow-y: auto; /* Enable vertical scrollbar only */
  margin-bottom: 20px;
  padding: 10px;
  color: white;
}



#messages {
  list-style-type: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column-reverse; /* Reverses the order of items */
  max-height: 100%; /* Adjust this to fit your layout */
  overflow-y: auto /* Enable vertical scrollbar */
}

#chat-form {
  display: flex;
  width: 100%;
  align-items: flex-end; /* Aligns the input to the bottom */
}

#message-input {
  flex: 1;
  padding: 5px;
  margin-right: 5px;
}

button {
  padding: 5px 10px;
  cursor: pointer;
}

.center-container {
  display: flex;
  justify-content: center;
  float:right;
}

.button-container {
  display: inline-flex; /* Display buttons inline */
}

.right-container {
  display: flex;
  justify-content: flex-end;
  width: 80%;
  margin-bottom: 20px; /* To add space between the buttons and the chat container */
}

.login-button {
  margin: 5px;
  /* Add other styles as needed */
}


.formular-container {
  display: flex;
  justify-content: flex-end;
  width: 80%;
}

.formular-container button {
  margin-left: 10px; /* Adds space between input and button */
}

  </style>
</head>

<body>

  <a id="loginLink" href="http://192.168.11.201/">
    <button class="login-button">MainMenu</button>
</a>

<% if (isLoggedIn) { %>
  <p style="color: white;">Chat season 3</p>
<% } %>

<div id="public-users">
  <p style="color: white;">People in Public Chat: <span id="online-users">3</span></p>
</div>

  <div class="formular-container">
    <form id="logoutForm" action="/logout" method="post">
      <button type="submit" class="login-button">Odhlásit se</button>
    </form>
  </div>

  <div id="chat-container">
    <ul id="messages"></ul>
  </div>

  <div id="chat-input-container" style="display: none;">
    <form id="chat-form">
      <input id="message-input" autocomplete="off" required maxlength="5000000000" />
      <button type="submit">Poslat</button>
    </form>
  </div>

  <% if (isLoggedIn) { %>
    <input type="file" id="fileInput" accept="image/*" style="display: none;">
    <button id="sendImageButton">Send Image</button>  
  <% } %>
  

  <script src="/socket.io/socket.io.js"></script>
  <script>
  const socket = io();
  const form = document.getElementById('chat-form');
const input = document.getElementById('message-input');
const messages = document.getElementById('messages');
  let canSendMessage = true;

  form.addEventListener('submit', (e) => {
    e.preventDefault();

    if (!canSendMessage) {
      alert('Počkej si 1s aby jsi mohl poslat zprávu');
      return;
    }

    const message = input.value.trim();
    const username = '<%= username %>';

    if (message.length > 0) {
      socket.emit('chat message', { message, username });
      input.value = '';
      canSendMessage = false;

      // Allow sending messages after 3 seconds
      setTimeout(() => {
        canSendMessage = true;
      }, 1000); // 3 seconds cooldown
    } else {
      alert('Please type at least one word.');
    }
  });
  
  function scrollToBottom() {
  messages.scrollTop = messages.scrollHeight;
}

  
  socket.on('chat message', async (data) => {
  const { message, username } = data;
  const currentDate = new Date();

  const day = currentDate.getDate();
  const month = currentDate.getMonth() + 1;
  const hour = currentDate.getHours();
  const minutes = currentDate.getMinutes();

  const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${currentDate.getFullYear()} v ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;


  let chatMessage = `
    <div>
      <span style="font-weight: bold;">${username}</span> <span style="font-size: 0.8em;">${formattedDate}</span>
    </div>
    <div>${message}</div>`; // Including the message directly without checking for URLs

  // Remaining code unchanged
  const messagesArray = JSON.parse(localStorage.getItem('chatMessages')) || [];
  messagesArray.push(chatMessage);
  localStorage.setItem('chatMessages', JSON.stringify(messagesArray));

  const li = document.createElement('li');
li.innerHTML = chatMessage;
messages.insertBefore(li, messages.firstChild);
  // Check if the message contains an image
  const isImage = message.toLowerCase().includes('<img');

  messages.insertBefore(li, messages.firstChild);

  if (isImage) {
    // If the message contains an image, listen for the image load event
    const images = li.getElementsByTagName('img');
    for (const image of images) {
      image.addEventListener('load', () => {
        if (senderUsername !== '<%= username %>') {
    // Scroll to the bottom only if the sender is not yourself
    scrollToBottom();
  }
      });
    }
  } else {
    if (senderUsername !== '<%= username %>') {
    // Scroll to the bottom only if the sender is not yourself
    scrollToBottom();
  }
  }
});





function handleFileSelect(event) {
  const fileInput = document.getElementById('fileInput');
  const sendImageButton = document.getElementById('sendImageButton');

  // Listen for changes in the file input
  fileInput.addEventListener('change', (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      sendImageButton.disabled = false;
    } else {
      sendImageButton.disabled = true;
    }
  });

  // Listen for the button click to open file explorer
  sendImageButton.addEventListener('click', () => {
    fileInput.click(); // Trigger the file input click event
  });

  // Listen for the file input change event to send the selected image
  fileInput.addEventListener('change', () => {
    const selectedFile = fileInput.files[0];
    if (selectedFile) {
      const reader = new FileReader();

      // Read the selected file as a data URL
      reader.readAsDataURL(selectedFile);

      // When the file is loaded, emit a 'chat message' event with the image data
      reader.onload = function () {
        const imageData = reader.result;
        const username = '<%= username %>';

        // Emit the 'chat message' event with the image data
        socket.emit('chat message', { message: imageData, username });
        fileInput.value = ''; // Clear the file input
  
      };
    }
  });
}

// Call the function to set up file input handling
handleFileSelect();



document.addEventListener('DOMContentLoaded', () => {
  const messagesContainer = document.getElementById('messages');

  fetch('/get-messages')
    .then(response => response.json())
    .then(messages => {
      messages.forEach(msg => {
        const chatMessage = formatChatMessage(msg.username, msg.message, msg.timestamp);
        const newMessage = createMessageElement(chatMessage);
        messagesContainer.insertBefore(newMessage, messagesContainer.firstChild); // Insert message at the beginning of the messages container
      });
    })
    .catch(error => {
      console.error('Error fetching messages:', error);
    });

  function formatChatMessage(username, message, timestamp) {
    const currentDate = new Date(timestamp);
    const day = currentDate.getDate();
    const month = currentDate.getMonth() + 1;
    const hour = currentDate.getHours();
    const minutes = currentDate.getMinutes();
    const formattedDate = `${day.toString().padStart(2, '0')}/${month.toString().padStart(2, '0')}/${currentDate.getFullYear()} v ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    return `
      <div>
        <span style="font-weight: bold;">${username}</span> <span style="font-size: 0.8em;">${formattedDate}</span>
      </div>
      <div>${processMessage(message)}</div>
    `;
  }

  function createMessageElement(chatMessage) {
    const li = document.createElement('li');
    li.innerHTML = chatMessage;
    return li;
  }

  function processMessage(message) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const urls = message.match(urlRegex);
    if (urls) {
      let processedMessage = '';
      for (const url of urls) {
        processedMessage += `<div><a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a></div>`;
      }
      return processedMessage;
    }
    return message; 
  }
});


    
const isLoggedIn = <%= isLoggedIn %>; // Get the value passed from the server
  const chatInputContainer = document.getElementById('chat-input-container');

  // Show/hide chat input based on user login status
  if (isLoggedIn) {
    chatInputContainer.style.display = 'block';
  } else {
    chatInputContainer.style.display = 'none';
  }

  function redirectTo(primaryURL, fallbackURL) {
        var testImage = new Image();
        testImage.onload = function () {
            window.location.href = primaryURL;
        };
        testImage.onerror = function () {
            window.location.href = fallbackURL;
        };
        testImage.src = primaryURL;
    }

 socket.on('user joined', (username) => {
      alert(`${username} has joined the chat`);
    });

    // Listen for 'user left' event
    socket.on('user left', (username) => {
      alert(`${username} has left the chat`);
    });

  </script>
  


</body>
</html>

